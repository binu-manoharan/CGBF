import java.util.*;
import java.io.*;
import java.math.*;

class Player {

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);

        // game loop
        int mylastscore = 0;
        int opponentLastScore = 0;
        ScoreNode rootNode = null;
        DataParser dataParser = new DataParser();

        while (true) {
            long startTime = System.currentTimeMillis();

            BlockQueue blockQueue = new BlockQueue();
            for (int i = 0; i < 8; i++) {
                int colorA = in.nextInt(); // color of the first block
                int colorB = in.nextInt(); // color of the attached block
                Block colourBlock = dataParser.createColourBlock(colorA, colorB);
                blockQueue.add(colourBlock);
            }
            int score1 = in.nextInt();
            Board myBoard = new Board();
            for (int i = 0; i < 12; i++) {
                String row = in.next();
                Cell[] boardRow = dataParser.createBoardRow(row);
                myBoard.setRow(Board.ROW_LENGTH - i - 1, boardRow);
            }

            int score2 = in.nextInt();

            for (int i = 0; i < 12; i++) {
                String row = in.next(); // One line of the map ('.' = empty, '0' = skull block, '1' to '5' = colored block)
            }

            boolean invalidRootNode = false;
            if (opponentLastScore / 420 != score2 / 420) {
                invalidRootNode = true;
            }
            opponentLastScore = score2;

            if (invalidRootNode) {
                rootNode = null;
                System.err.println("Board has dropped skulls!");
            }

            ShinyNewGameAI gameAI = new ShinyNewGameAI(myBoard, blockQueue);
            List<ScoreNode> nextMove = gameAI.calculateNextMove(rootNode);
            final int highestNodeIndex = nextMove.get(1).getNodeIndex();
            Orientation highestOrientation = nextMove.get(1).getOrientation();

            System.err.println();

            System.err.println("Current play: " + highestNodeIndex + "  Orientation: " + highestOrientation);
            final ScoreNode highestScoreNode = gameAI.getHighestScoreNode(nextMove.get(0));

            dataParser.compareBeforeAndAfterBoards(myBoard, blockQueue, highestScoreNode);

            rootNode = nextMove.get(1);
            rootNode.setParent(null);
            System.out.println(highestNodeIndex + " " + highestOrientation.getEquivalentInt() + " " + highestScoreNode.getLevel() + ": " + highestScoreNode.getNodeScore()); // "x": the column in which to drop your blocks
            long endTime = System.currentTimeMillis();
            System.err.print("Exec time: " + ((endTime - startTime)));

        }
    }
}
