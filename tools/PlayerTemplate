import java.util.*;
import java.io.*;
import java.math.*;

class Player {

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);

        // game loop
        int mylastscore = 0;
        int opponentLastScore = 0;
        ScoreNode rootNode = null;
        DataParser dataParser = new DataParser();

        while (true) {
            long startTime = System.currentTimeMillis();

            BlockQueue blockQueue = new BlockQueue();
            for (int i = 0; i < 8; i++) {
                int colorA = in.nextInt(); // color of the first block
                int colorB = in.nextInt(); // color of the attached block
                Block colourBlock = dataParser.createColourBlock(colorA, colorB);
                blockQueue.add(colourBlock);
            }
            int score1 = in.nextInt();
            Board myBoard = new Board();
            for (int i = 0; i < 12; i++) {
                String row = in.next();
                Cell[] boardRow = dataParser.createBoardRow(row);
                myBoard.setRow(Board.ROW_LENGTH - i - 1, boardRow);
            }

            int score2 = in.nextInt();

            for (int i = 0; i < 12; i++) {
                String row = in.next(); // One line of the map ('.' = empty, '0' = skull block, '1' to '5' = colored block)
            }

            boolean invalidRootNode = false;
            if (opponentLastScore / 420 != score2 / 420) {
                invalidRootNode = true;
            }
            opponentLastScore = score2;

            if (invalidRootNode) {
                rootNode = null;
                System.err.println("Board has dropped skulls!");
            }

            ShinyNewGameAI gameAI = new ShinyNewGameAI(myBoard, blockQueue);
            ScoreNode nextMove = gameAI.calculateNextMove(rootNode);
            final int nodeIndex = nextMove.getNodeIndex();
            Orientation orientation = nextMove.getOrientation();

            System.err.println();

            rootNode = nextMove;
            rootNode.setParent(null);

            System.err.println("Current play: " + nodeIndex + "  Orientation: " + orientation);
            final ScoreNode highestScoreNode = gameAI.getHighestScoreNode(rootNode);
            final Board updatedBoard = dataParser.followPath(myBoard, blockQueue, highestScoreNode);
            final String[] updatedBoardRows = dataParser.prettifyBoard(updatedBoard);
            final String[] currentBoardRows = dataParser.prettifyBoard(myBoard);
            for (int i = 0; i < 12; i++) {
                System.err.println(currentBoardRows[i] + "   " + updatedBoardRows[i]);
            }

            System.out.println(nodeIndex + " " + orientation.getEquivalentInt()); // "x": the column in which to drop your blocks
            long endTime = System.currentTimeMillis();
            System.err.print("Exec time: " + ((endTime - startTime)));

        }
    }
}
