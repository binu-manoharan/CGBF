import java.util.*;
import java.io.*;
import java.math.*;

class Player {

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);

        ScoreNode myTreeRootNode =  null;
        ScoreNode opponentTreeRootNode =  null;
        DataParser dataParser = new DataParser();

        final ScoreBasedTreeInvalidator scoreBasedTreeInvalidator = new ScoreBasedTreeInvalidator();

        while (true) {
            final TimeHelper timeHelper = new TimeHelper();

            BlockQueue blockQueue = new BlockQueue();
            for (int i = 0; i < 8; i++) {
                int colorA = in.nextInt(); // color of the first block
                int colorB = in.nextInt(); // color of the attached block
                Block colourBlock = dataParser.createColourBlock(colorA, colorB);
                blockQueue.add(colourBlock);
            }
            int myScore = in.nextInt();
            Board myBoard = new Board();
            for (int i = 0; i < 12; i++) {
                String row = in.next();
                Cell[] boardRow = dataParser.createBoardRow(row);
                myBoard.setRow(Board.ROW_LENGTH - i - 1, boardRow);
            }

            Board opponentBoard = new Board();
            int opponentScore = in.nextInt();

            for (int i = 0; i < 12; i++) {
                String row = in.next(); // One line of the map ('.' = empty, '0' = skull block, '1' to '5' = colored block)
            }

            if (!scoreBasedTreeInvalidator.isMyTreeValid(opponentScore)) {
                myTreeRootNode = null;
                System.err.println("My board has dropped skulls!");
            }

            if (!scoreBasedTreeInvalidator.isOpponentTreeValid(myScore)) {
                opponentTreeRootNode = null;
                System.err.println("Opponent board has dropped skulls!");
            }

            scoreBasedTreeInvalidator.setOpponentLastScore(opponentScore);
            scoreBasedTreeInvalidator.setMyLastScore(myScore);

            ShinyNewGameAI gameAI = new ShinyNewGameAI(myBoard, blockQueue);
            ScoreNode nextMove = gameAI.calculateNextMove(myTreeRootNode);

            final int highestNodeIndex = nextMove.getNodeIndex();
            Orientation highestOrientation = nextMove.getOrientation();

            System.err.println("Current play: " + highestNodeIndex + "  Orientation: " + highestOrientation);

//            dataParser.compareBeforeAndAfterBoards(myBoard, blockQueue, highestScoreNode);

            myTreeRootNode = nextMove;
            myTreeRootNode.setParent(null);

            System.err.print("Exec time for completion: " + timeHelper.getTimeSinceStartInMills());
            System.out.println(highestNodeIndex + " " + highestOrientation.getEquivalentInt() + " " +
                    gameAI.getMessage());
        }
    }
}
